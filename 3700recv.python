#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math

WINDOW_SIZE = 4

class Receiver:
    def __init__(self):
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('0.0.0.0', 0))
        self.port = self.socket.getsockname()[1]
        self.log("Bound to port %d" % self.port)

        self.remote_host = None
        self.remote_port = None
        self.last_seq_num = -1
        self.window = []

    def send(self, message):
        self.socket.sendto(json.dumps(message).encode('utf-8'), (self.remote_host, self.remote_port))

    def log(self, message):
        sys.stderr.write(message + "\n")
        sys.stderr.flush()

    def run(self):
        while True:
            socks = select.select([self.socket], [], [])[0]
            for conn in socks:
                data, addr = conn.recvfrom(65535)

                if self.remote_host is None:
                    self.remote_host = addr[0]
                    self.remote_port = addr[1]

                msg = json.loads(data.decode('utf-8'))
                self.log(f"Received data message: {msg}")

                seq_num = msg.get("seq_num")

                # Process and print the packet's data
                print(msg.get("data", ""), end='', flush=True)

                # Check if this packet is a duplicate
                if seq_num <= self.last_seq_num:
                    continue
                
                # check if the sequence number is one more than current sequence number, if not
                # then the packet is out of order
                if seq_num == self.last_seq_num + 1 and len(self.window) == 0:
                    self.last_seq_num = seq_num
                     # Send back an acknowledgment with the received sequence number
                    ack_msg = {"type": "ack", "ack": seq_num}
                    self.send(ack_msg)

                else:
                    if len(self.window) > WINDOW_SIZE:
                        raise ValueError(f"Sequence overflow {self.window}")
                    else: 
                        packet = {"seq_num": seq_num, "data": msg}
                        self.window.append(packet)

                        if seq_num == self.last_seq_num + 1:
                            # sort the window
                            seq_nums = list(map(lambda x: x['seq_num'], self.window))
                            sorted_seq_nums = sorted(seq_nums)
                            counter = self.last_seq_num
                            for entry in sorted_seq_nums:
                                if entry != counter + 1:
                                    raise ValueError("Out of order sequence")
                                counter += 1

                            # send out the acknowledgements
                            for i in range(sorted_seq_nums[0], sorted_seq_nums[-1] + 1):
                                ack_msg = {"type": "ack", "ack": i}
                                self.send(ack_msg)

                            # resize window
                            self.window = []

                            

                        

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='receive data')
    args = parser.parse_args()
    receiver = Receiver()
    receiver.run()
