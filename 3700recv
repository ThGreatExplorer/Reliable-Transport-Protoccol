#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math, hashlib

#WINDOW_SIZE = 2

class Receiver:
    def __init__(self):
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('0.0.0.0', 0))
        self.port = self.socket.getsockname()[1]
        self.log("Bound to port %d" % self.port)

        self.remote_host = None
        self.remote_port = None
        self.last_seq_num = -1
        self.window = []
        self.window_size = 8 # set the default window size as 8

    def send(self, message):
        self.socket.sendto(json.dumps(message).encode('utf-8'), (self.remote_host, self.remote_port))
        self.log("Sending ack for: " + str(self.last_seq_num))

    def log(self, message):
        sys.stderr.write(message + "\n")
        sys.stderr.flush()

    def run(self):
        while True:
            socks = select.select([self.socket], [], [])[0]
            for conn in socks:
                data, addr = conn.recvfrom(65535)

                window_sequences = [entry["seq_num"] for entry in self.window]
                self.log("Receiver Window: " + str(window_sequences))
                self.log("Last Valid Sequence # Received: " + str(self.last_seq_num))

                if self.remote_host is None:
                    self.remote_host = addr[0]
                    self.remote_port = addr[1]

                # try to read the data message and decode the fields, if an exception is thrown, then the data messsage is corrupted.
                # wait for the sender to timeout and resend the packet
                try:
                    msg = json.loads(data.decode('utf-8'))
                    self.log(f"Received data message: {msg}")

                    # compute and check the hashcodes to ensure data integrity of the payload for the packets
                    seq_num = msg.get("seq_num")
                    data = msg.get("data")
                    computed_hashcode = hashlib.new("sha256")
                    computed_hashcode.update(data.encode())
                    computed_hashcode = computed_hashcode.hexdigest()

                    received_hashcode = msg.get("checksum")
                    # Check if this packet is corrupted
                    if received_hashcode != computed_hashcode:
                        # drop the packet
                        self.log(f"Data Message sequence {seq_num} is corrupted: [sender checksum: {received_hashcode}, receiver checksum: {computed_hashcode}]")
                        continue
                except Exception as e:
                    # if the packet is unable to be decoded/fields are mutated, then drop the packet
                    self.log(f"Data Message is corrupted. Error: {e}")
                    continue


                # Check if this packet is a duplicate
                if seq_num <= self.last_seq_num:
                    ack_msg = {"type": "ack", "ack": self.last_seq_num}
                    self.send(ack_msg)
                    continue
                
                # If the packet is the next expected packet, process it and any subsequent packets in the window
                if seq_num == self.last_seq_num + 1:
                    self.last_seq_num = seq_num
                    ack_msg = {"type": "ack", "ack": self.last_seq_num}
                    self.send(ack_msg)
                    print(msg.get("data", ""), end='', flush=True)

                    # Check the window for any packets that can now be processed
                    self.window.sort(key=lambda x: x['seq_num'])  # Ensure the window is sorted
                    while self.window and self.window[0]['seq_num'] == self.last_seq_num + 1:
                        # send acks for the elements stored in the window based on their sequence number
                        packet = self.window.pop(0)
                        self.last_seq_num = packet['seq_num']
                        ack_msg = {"type": "ack", "ack": self.last_seq_num}
                        self.send(ack_msg)
                        print(packet.get("data", ""), end='', flush=True)
                else:
                    # If out of order, add to the window, but only if it's within the window size
                    if len(self.window) < self.window_size:
                        # check if the packet is not already in the window
                        if seq_num not in window_sequences:
                            self.window.append(msg)
                    else:
                        self.log(f"Warning: Received packet outside of window size (Seq: {seq_num})")
                        raise ValueError("Exceeded window size")
                        

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='receive data')
    args = parser.parse_args()
    receiver = Receiver()
    receiver.run()
